// üåé Usando o m√©todo toLocaleString() para formatar datas e valores com base na localiza√ß√£o

let date = new Date("2024-07-02T14:30:10") 
// Criamos um objeto Date com uma data e hora espec√≠fica

// Exibe a data e a hora no formato padr√£o do sistema (localiza√ß√£o padr√£o do usu√°rio)
console.log(date.toLocaleString())

// Exibe a data e hora no formato em ingl√™s ("en" = English)
console.log(date.toLocaleString("en"))
// Exemplo: "7/2/2024, 2:30:10 PM" (formato americano)

// üîΩ Abaixo, usamos a op√ß√£o 'dateStyle' para controlar o formato da data
// 'short' = formato mais curto poss√≠vel (geralmente num√©rico)
console.log(date.toLocaleString("pt-BR", {
  dateStyle: "short"
}))
// Exemplo: "02/07/2024"

// 'long' = formato mais completo com nome do m√™s por extenso
console.log(date.toLocaleString("pt-BR", {
  dateStyle: "long"
}))
// Exemplo: "2 de julho de 2024"

// 'medium' = um meio-termo entre curto e longo
console.log(date.toLocaleString("pt-BR", {
  dateStyle: "medium"
}))
// Exemplo: "2 de jul. de 2024"

// 'full' = formato mais detalhado poss√≠vel, incluindo o dia da semana
console.log(date.toLocaleString("pt-BR", {
  dateStyle: "full"
}))
// Exemplo: "ter√ßa-feira, 2 de julho de 2024"

// üß© Podemos tamb√©m personalizar partes espec√≠ficas da data/hora
console.log(date.toLocaleString("pt-BR", {
  day: "2-digit",       // Dia com dois d√≠gitos
  month: "2-digit",     // M√™s com dois d√≠gitos
  hour: "2-digit",      // Hora com dois d√≠gitos
  minute: "2-digit"     // Minuto com dois d√≠gitos
}))
// Exemplo: "02/07, 14:30"

// üí∞ Tamb√©m podemos usar toLocaleString para formatar valores num√©ricos como moeda

const amount = 12.5 // Valor em n√∫mero

console.log(amount.toLocaleString("pt-BR", {
  style: "currency",   // Define que ser√° exibido como moeda
  currency: "BRL"      // Define o tipo da moeda: "BRL" = Real brasileiro
}))
// Exemplo: "R$¬†12,50"





