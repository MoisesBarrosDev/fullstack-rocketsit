// ===================================================
// üìö EXPLICA√á√ÉO COMPLETA DO EVENT LOOP EM JAVASCRIPT
// ===================================================

/*
  O JavaScript √© single-threaded: ele executa uma coisa por vez,
  de cima pra baixo. Para lidar com opera√ß√µes ass√≠ncronas (ex: setTimeout, fetch, Promises),
  ele usa um mecanismo chamado EVENT LOOP.

  Aqui est√£o os principais componentes que fazem tudo funcionar:
*/

// ---------------------------------------------------

/*
  üìå 1. CALL STACK (Pilha de Execu√ß√£o):
  - √â onde o JavaScript empilha as fun√ß√µes que est√£o sendo executadas no momento.
  - Ela funciona como uma pilha (LIFO: Last In, First Out).
*/

// ---------------------------------------------------

/*
  üìå 2. WEB APIs (APIs do navegador ou ambiente Node.js):
  - Quando usamos setTimeout, fetch ou addEventListener, a execu√ß√£o vai pra essas APIs.
  - Elas lidam com essas tarefas de forma ass√≠ncrona, enquanto o JS segue seu fluxo.
*/

// ---------------------------------------------------

/*
  üìå 3. CALLBACK QUEUE (Fila de Tarefas):
  - Depois que a tarefa ass√≠ncrona termina (ex: setTimeout expira),
    o callback vai pra essa fila, esperando a vez de ser executado.
*/

// ---------------------------------------------------

/*
  üìå 4. MICROTASK QUEUE:
  - Fila separada com **maior prioridade** que a Callback Queue.
  - Promises e m√©todos como queueMicrotask() usam essa fila.
*/

// ---------------------------------------------------

/*
  üìå 5. EVENT LOOP:
  - Ele observa a Call Stack e a fila de tarefas.
  - Quando a Stack estiver vazia, ele pega algo da fila e coloca pra execu√ß√£o.
*/

// +---------------------+
// |     Call Stack      | ‚Üê Executa o c√≥digo linha por linha
// +---------------------+
//           ‚Üì
// +---------------------+
// |     Event Loop      | ‚Üê Olha a fila, v√™ se a stack t√° vazia
// +---------------------+
//           ‚Üì
// +---------------------+
// |   Callback Queue    | ‚Üê Esperando a vez de executar
// +---------------------+


// ===================================================
//  EXEMPLO PR√ÅTICO MOSTRANDO O FLUXO DO EVENT LOOP
// ===================================================

// Microtasks: S√£o tarefas de alta prioridade que s√£o executadas antes das Macrotasks(temporizadores e promises)
console.log('1') // S√≠ncrono ‚Üí executa primeiro

// Macrotasks: S√£o tarefas de menor prioridade, como callbacks de eventos,setTimeout,setInterval.
setTimeout(() => {
  console.log('2') // Vai pra Web API e depois Callback Queue
}, 0)

// Macrotasks: S√£o tarefas de menor prioridade, como callbacks de eventos,setTimeout,setInterval.
Promise.resolve().then(() => {
  console.log('3') // Vai pra Microtask Queue ‚Üí executa antes de setTimeout
})

// Microtasks: S√£o tarefas de alta prioridade que s√£o executadas antes das Macrotasks(temporizadores e promises)
console.log('4') // S√≠ncrono ‚Üí executa antes das filas

// ==== SA√çDA ESPERADA ====
// 1
// 4
// 3
// 2

// ===================================================
//  OUTRO EXEMPLO MOSTRANDO ATRASO SIMULADO
// ===================================================

function simulandoProcessoAssincrono() {
  console.log('Iniciando processo...')

  setTimeout(() => {
    console.log('Processo finalizado ap√≥s 2 segundos')
  }, 2000)

  console.log('Processo enviado para execu√ß√£o') // S√≠ncrono
}

simulandoProcessoAssincrono()

// ===================================================
//  RESUMO FINAL
// ===================================================

/*
  ‚úî O JS executa tudo que for s√≠ncrono primeiro (linha por linha).
  ‚úî setTimeout, fetch, etc., s√£o ass√≠ncronos e v√£o para a Web API.
  ‚úî Promises v√£o para a Microtask Queue.
  ‚úî Event Loop entrega as tarefas de acordo com a fila (Microtask > Callback).
  ‚úî Call Stack precisa estar vazia pra que o Event Loop coloque a pr√≥xima fun√ß√£o.
*/


